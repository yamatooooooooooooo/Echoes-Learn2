import React, { useState } from 'react';
import { 
  Box, 
  Container, 
  Typography, 
  Paper, 
  Tabs, 
  Tab, 
  Breadcrumbs, 
  Link, 
  Grid, 
  Card, 
  CardContent, 
  Divider,
  Chip
} from '@mui/material';
import HomeIcon from '@mui/icons-material/Home';
import AssessmentIcon from '@mui/icons-material/Assessment';
import HistoryIcon from '@mui/icons-material/History';
import EditNoteIcon from '@mui/icons-material/EditNote';
import InfoIcon from '@mui/icons-material/Info';
import StudySessionList from '../components/StudySessionList';
import StudySessionForm from '../components/StudySessionForm';
import { StudySession } from '../../../../domain/models/StudyAnalyticsModel';
import { format, parseISO } from 'date-fns';
import { ja } from 'date-fns/locale';
import { withMaintenanceOverlay } from '../../../../hooks/useMaintenanceOverlay';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel: React.FC<TabPanelProps> = ({ children, value, index, ...other }) => {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`study-session-tabpanel-${index}`}
      aria-labelledby={`study-session-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
};

const StudySessionPage: React.FC = () => {
  // タブの状態管理
  const [tabValue, setTabValue] = useState(0);
  
  // 選択されたセッション
  const [selectedSession, setSelectedSession] = useState<StudySession | null>(null);
  
  // タブ変更ハンドラー
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };
  
  // セッション選択ハンドラー
  const handleSessionSelect = (session: StudySession) => {
    setSelectedSession(session);
    setTabValue(2); // 詳細タブに切り替え
  };
  
  // 新規セッション追加ハンドラー
  const handleAddSession = () => {
    setSelectedSession(null);
    setTabValue(1); // 記録タブに切り替え
  };
  
  // 日付のフォーマット
  const formatDate = (dateString: string) => {
    try {
      const date = parseISO(dateString);
      return format(date, 'yyyy年MM月dd日 (E)', { locale: ja });
    } catch (error) {
      return dateString;
    }
  };
  
  // 効率スコアの色
  const getEfficiencyColor = (efficiency: number) => {
    if (efficiency >= 80) return 'success';
    if (efficiency >= 60) return 'primary';
    if (efficiency >= 40) return 'warning';
    return 'error';
  };
  
  const handleSave = () => {
    console.log('セッション保存');
  };
  
  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      {/* パンくずリスト */}
      <Breadcrumbs aria-label="breadcrumb" sx={{ mb: 2 }}>
        <Link
          underline="hover"
          color="inherit"
          href="/"
          sx={{ display: 'flex', alignItems: 'center' }}
        >
          <HomeIcon sx={{ mr: 0.5 }} fontSize="inherit" />
          ホーム
        </Link>
        <Typography
          sx={{ display: 'flex', alignItems: 'center' }}
          color="text.primary"
        >
          <AssessmentIcon sx={{ mr: 0.5 }} fontSize="inherit" />
          学習記録
        </Typography>
      </Breadcrumbs>
      
      {/* ヘッダー */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" gutterBottom>
          学習記録
        </Typography>
        <Typography variant="subtitle1" color="text.secondary">
          学習セッションの記録と分析
        </Typography>
      </Box>
      
      {/* コンテンツエリア */}
      <Grid container spacing={3}>
        {/* サイドバー */}
        <Grid item xs={12} md={3}>
          <Paper sx={{ p: 2, mb: 3 }}>
            <Tabs
              orientation="vertical"
              variant="scrollable"
              value={tabValue}
              onChange={handleTabChange}
              aria-label="学習記録タブ"
              sx={{
                borderRight: 1,
                borderColor: 'divider',
                '& .MuiTab-root': {
                  alignItems: 'flex-start',
                  textAlign: 'left',
                }
              }}
            >
              <Tab
                icon={<HistoryIcon />}
                iconPosition="start"
                label="履歴"
                id="study-session-tab-0"
                aria-controls="study-session-tabpanel-0"
              />
              <Tab
                icon={<EditNoteIcon />}
                iconPosition="start"
                label="記録"
                id="study-session-tab-1"
                aria-controls="study-session-tabpanel-1"
              />
              <Tab
                icon={<InfoIcon />}
                iconPosition="start"
                label="詳細"
                id="study-session-tab-2"
                aria-controls="study-session-tabpanel-2"
                disabled={!selectedSession}
              />
            </Tabs>
          </Paper>
        </Grid>
        
        {/* メインコンテンツ */}
        <Grid item xs={12} md={9}>
          <Paper sx={{ p: 3 }}>
            {/* 履歴タブ */}
            <TabPanel value={tabValue} index={0}>
              <Typography variant="h6" gutterBottom>
                学習記録履歴
              </Typography>
              <StudySessionList
                onSelectSession={handleSessionSelect}
                onAddSession={handleAddSession}
              />
            </TabPanel>
            
            {/* 記録タブ */}
            <TabPanel value={tabValue} index={1}>
              <Typography variant="h6" gutterBottom>
                学習セッションを記録
              </Typography>
              <StudySessionForm
                initialValues={selectedSession || undefined}
                editMode={!!selectedSession?.id}
                sessionId={selectedSession?.id}
                onSave={handleSave}
              />
            </TabPanel>
            
            {/* 詳細タブ */}
            <TabPanel value={tabValue} index={2}>
              {selectedSession ? (
                <Box>
                  <Typography variant="h6" gutterBottom>
                    学習セッション詳細
                  </Typography>
                  
                  <Card sx={{ mb: 3 }}>
                    <CardContent>
                      <Box sx={{ mb: 2 }}>
                        <Typography variant="h5" gutterBottom>
                          {selectedSession.subjectName}
                        </Typography>
                        <Chip
                          label={`効率: ${selectedSession.efficiency}％`}
                          color={getEfficiencyColor(selectedSession.efficiency) as any}
                          size="small"
                        />
                      </Box>
                      
                      <Divider sx={{ my: 2 }} />
                      
                      <Grid container spacing={2}>
                        <Grid item xs={12} sm={6}>
                          <Typography variant="subtitle2" color="text.secondary">
                            日付
                          </Typography>
                          <Typography variant="body1">
                            {formatDate(selectedSession.date)}
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={12} sm={6}>
                          <Typography variant="subtitle2" color="text.secondary">
                            時間帯
                          </Typography>
                          <Typography variant="body1">
                            {selectedSession.timeOfDay}
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={12} sm={6}>
                          <Typography variant="subtitle2" color="text.secondary">
                            開始時刻
                          </Typography>
                          <Typography variant="body1">
                            {selectedSession.startTime}
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={12} sm={6}>
                          <Typography variant="subtitle2" color="text.secondary">
                            継続時間
                          </Typography>
                          <Typography variant="body1">
                            {selectedSession.duration}分
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={12} sm={6}>
                          <Typography variant="subtitle2" color="text.secondary">
                            完了ページ数
                          </Typography>
                          <Typography variant="body1">
                            {selectedSession.pagesCompleted}ページ
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={12}>
                          <Divider sx={{ my: 2 }} />
                          
                          {selectedSession.memo && (
                            <>
                              <Typography variant="subtitle2" color="text.secondary">
                                メモ
                              </Typography>
                              <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>
                                {selectedSession.memo}
                              </Typography>
                            </>
                          )}
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                  
                  <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                    <Chip
                      label={`作成日: ${selectedSession.createdAt ? 
                        (typeof selectedSession.createdAt === 'object' && 'seconds' in selectedSession.createdAt) ? 
                          format(new Date((selectedSession.createdAt as any).seconds * 1000), 'yyyy/MM/dd HH:mm') : 
                          format(new Date(selectedSession.createdAt), 'yyyy/MM/dd HH:mm') 
                        : '不明'}`}
                      variant="outlined"
                      size="small"
                    />
                  </Box>
                </Box>
              ) : (
                <Typography variant="body1" color="text.secondary">
                  セッションが選択されていません
                </Typography>
              )}
            </TabPanel>
          </Paper>
        </Grid>
      </Grid>
    </Container>
  );
};

// メンテナンスオーバーレイを適用
export default withMaintenanceOverlay(StudySessionPage, {
  message: '学習セッション記録機能は現在メンテナンス中です。近日中に実装予定です。',
  title: '学習セッション機能準備中',
  severity: 'info'
}); 