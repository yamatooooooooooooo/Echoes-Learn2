import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  ListItemSecondaryAction,
  IconButton,
  Chip,
  Divider,
  Alert,
  CircularProgress,
  Button,
  Menu,
  MenuItem,
  Tooltip,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Grid
} from '@mui/material';
import {
  MenuBook as MenuBookIcon,
  Timer as TimerIcon,
  CalendarToday as CalendarIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  MoreVert as MoreVertIcon,
  Add as AddIcon,
  LocationOn as LocationIcon,
  FilterList as FilterListIcon,
  Sort as SortIcon
} from '@mui/icons-material';
import { useFirebase } from '../../../../contexts/FirebaseContext';
import { useServices } from '../../../../hooks/useServices';
import { StudySession } from '../../../../domain/models/StudyAnalyticsModel';
import { Subject } from '../../../../domain/models/SubjectModel';
import StudySessionForm from './StudySessionForm';
import { format, parseISO } from 'date-fns';
import { ja } from 'date-fns/locale';

interface StudySessionListProps {
  onSelectSession?: (session: StudySession) => void;
  onAddSession?: () => void;
}

/**
 * 学習セッションリスト表示コンポーネント
 */
const StudySessionList: React.FC<StudySessionListProps> = ({
  onSelectSession,
  onAddSession
}) => {
  const { auth } = useFirebase();
  
  // useServicesから必要なリポジトリを取得
  const servicesContext = useServices();
  // 実際のアプリケーションではuseServicesからリポジトリを取得するように調整が必要
  const studyAnalyticsRepository = { 
    getStudySessions: async (userId: string) => [] as StudySession[],
    deleteStudySession: async (id: string) => {}
  };
  
  // 状態
  const [sessions, setSessions] = useState<StudySession[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedSessionId, setSelectedSessionId] = useState<string | null>(null);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [sessionToDelete, setSessionToDelete] = useState<StudySession | null>(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [editSessionId, setEditSessionId] = useState<string | null>(null);

  // メニューの開閉
  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, sessionId: string) => {
    setMenuAnchorEl(event.currentTarget);
    setSelectedSessionId(sessionId);
  };

  const handleMenuClose = () => {
    setMenuAnchorEl(null);
    setSelectedSessionId(null);
  };

  // 削除ダイアログの開閉
  const handleDeleteDialogOpen = (sessionId: string) => {
    setSessionToDelete(sessions.find(s => s.id === sessionId) || null);
    setDeleteDialogOpen(true);
    handleMenuClose();
  };

  const handleDeleteDialogClose = () => {
    setDeleteDialogOpen(false);
    setSessionToDelete(null);
  };

  // 編集モードの開閉
  const handleEditSession = (sessionId: string) => {
    setEditSessionId(sessionId);
    handleMenuClose();
  };

  // セッションの取得
  const fetchSessions = async () => {
    try {
      setLoading(true);
      setError(null);
      const userId = auth.currentUser?.uid || 'current-user';
      const sessionsList = await studyAnalyticsRepository.getStudySessions(userId);
      
      // 日付の新しい順にソート
      const sortedSessions = [...sessionsList].sort((a, b) => {
        const dateA = a.date + 'T' + a.startTime;
        const dateB = b.date + 'T' + b.startTime;
        return new Date(dateB).getTime() - new Date(dateA).getTime();
      });
      
      setSessions(sortedSessions);
    } catch (error) {
      console.error('学習セッションの取得に失敗しました:', error);
      setError('学習セッションを読み込めませんでした');
    } finally {
      setLoading(false);
    }
  };

  // コンポーネントマウント時にセッションを取得
  useEffect(() => {
    fetchSessions();
  }, [auth]);

  // セッションの削除
  const handleDeleteSession = async () => {
    if (!sessionToDelete || !sessionToDelete.id) return;
    
    try {
      setLoading(true);
      await studyAnalyticsRepository.deleteStudySession(sessionToDelete.id);
      
      // 一覧から削除したセッションを除外
      setSessions(prev => prev.filter(s => s.id !== sessionToDelete.id));
      
      handleDeleteDialogClose();
    } catch (error) {
      console.error('学習セッションの削除に失敗しました:', error);
      setError('学習セッションの削除に失敗しました。');
    } finally {
      setLoading(false);
    }
  };

  // セッションを選択したときの処理
  const handleSelectSession = (session: StudySession) => {
    if (onSelectSession) {
      onSelectSession(session);
    }
  };

  // 新規セッション追加フォームを表示
  const handleShowAddForm = () => {
    setShowAddForm(true);
    if (onAddSession) {
      onAddSession();
    }
  };

  // フォームの保存完了後の処理
  const handleFormSaved = () => {
    setShowAddForm(false);
    setEditSessionId(null);
    fetchSessions();
  };

  // 効率スコアの色を決定
  const getEfficiencyColor = (efficiency: number) => {
    if (efficiency >= 80) return 'success';
    if (efficiency >= 60) return 'primary';
    if (efficiency >= 40) return 'warning';
    return 'error';
  };

  // 日付のフォーマット
  const formatDate = (dateString: string) => {
    try {
      const date = parseISO(dateString);
      return format(date, 'yyyy年MM月dd日 (E)', { locale: ja });
    } catch (error) {
      return dateString;
    }
  };

  // ローディング中の表示
  if (loading && sessions.length === 0) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
        <CircularProgress />
      </Box>
    );
  }

  // エラー表示
  if (error && sessions.length === 0) {
    return (
      <Alert severity="error" sx={{ mb: 3 }}>
        {error}
      </Alert>
    );
  }

  // セッションがない場合の表示
  if (sessions.length === 0) {
    return (
      <Paper sx={{ p: 3, mb: 3, textAlign: 'center' }}>
        <Typography variant="body1" sx={{ mb: 2 }}>
          まだ学習セッションの記録がありません。
        </Typography>
        <Button
          variant="contained"
          color="primary"
          startIcon={<AddIcon />}
          onClick={handleShowAddForm}
        >
          学習セッションを記録
        </Button>
        
        {showAddForm && (
          <Box sx={{ mt: 3 }}>
            <StudySessionForm
              onSave={handleFormSaved}
              onCancel={() => setShowAddForm(false)}
            />
          </Box>
        )}
      </Paper>
    );
  }

  return (
    <Box>
      {/* ヘッダー */}
      <Box sx={{ mb: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Typography variant="h6" component="h2">
          学習セッション履歴
        </Typography>
        <Box>
          <Tooltip title="学習セッションを追加">
            <Button
              variant="outlined"
              size="small"
              startIcon={<AddIcon />}
              onClick={handleShowAddForm}
              sx={{ ml: 1 }}
            >
              セッション追加
            </Button>
          </Tooltip>
        </Box>
      </Box>
      
      {/* エラー表示 */}
      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}
      
      {/* 新規セッション追加フォーム */}
      {showAddForm && (
        <Box sx={{ mb: 3 }}>
          <StudySessionForm
            onSave={handleFormSaved}
            onCancel={() => setShowAddForm(false)}
          />
        </Box>
      )}
      
      {/* 編集フォーム */}
      {editSessionId && (
        <Box sx={{ mb: 3 }}>
          <StudySessionForm
            editMode
            sessionId={editSessionId}
            onSave={handleFormSaved}
            onCancel={() => setEditSessionId(null)}
          />
        </Box>
      )}

      {/* セッションリスト */}
      <Paper sx={{ mb: 3 }}>
        <List sx={{ width: '100%', bgcolor: 'background.paper', p: 0 }}>
          {sessions.map((session) => (
            <React.Fragment key={session.id}>
              <ListItem
                alignItems="flex-start"
                sx={{
                  cursor: 'pointer',
                  '&:hover': {
                    bgcolor: 'rgba(0, 0, 0, 0.04)',
                  },
                }}
                onClick={() => handleSelectSession(session)}
                secondaryAction={
                  <IconButton
                    edge="end"
                    aria-label="options"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleMenuOpen(e, session.id || '');
                    }}
                  >
                    <MoreVertIcon />
                  </IconButton>
                }
              >
                <Grid container spacing={2}>
                  <Grid item xs={12} md={7}>
                    <ListItemText
                      primary={
                        <Typography variant="subtitle1" fontWeight="bold">
                          {session.subjectName}
                        </Typography>
                      }
                      secondary={
                        <>
                          <Typography variant="body2" color="text.primary">
                            {formatDate(session.date)} {session.timeOfDay}
                          </Typography>
                          <Typography variant="body2">
                            {session.startTime}～ ({session.duration}分)
                          </Typography>
                          {session.memo && (
                            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                              {session.memo}
                            </Typography>
                          )}
                        </>
                      }
                    />
                  </Grid>
                  <Grid item xs={12} md={5} sx={{ display: 'flex', alignItems: 'center' }}>
                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end', ml: 'auto' }}>
                      <Chip
                        label={`効率: ${session.efficiency}％`}
                        color={getEfficiencyColor(session.efficiency) as any}
                        size="small"
                        sx={{ mb: 1 }}
                      />
                      <Typography variant="body2">
                        {session.pagesCompleted} ページ完了
                      </Typography>
                    </Box>
                  </Grid>
                </Grid>
              </ListItem>
              <Divider component="li" />
            </React.Fragment>
          ))}
        </List>
      </Paper>

      {/* 操作メニュー */}
      <Menu
        anchorEl={menuAnchorEl}
        open={Boolean(menuAnchorEl)}
        onClose={handleMenuClose}
      >
        <MenuItem onClick={() => selectedSessionId && handleEditSession(selectedSessionId)}>
          <ListItemIcon>
            <EditIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>編集</ListItemText>
        </MenuItem>
        <MenuItem onClick={() => selectedSessionId && handleDeleteDialogOpen(selectedSessionId)}>
          <ListItemIcon>
            <DeleteIcon fontSize="small" color="error" />
          </ListItemIcon>
          <ListItemText>削除</ListItemText>
        </MenuItem>
      </Menu>

      {/* 削除確認ダイアログ */}
      <Dialog
        open={deleteDialogOpen}
        onClose={handleDeleteDialogClose}
      >
        <DialogTitle>学習セッションの削除</DialogTitle>
        <DialogContent>
          <DialogContentText>
            {sessionToDelete?.subjectName}の学習セッション（{sessionToDelete?.date}）を削除しますか？この操作は取り消せません。
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleDeleteDialogClose} color="primary">
            キャンセル
          </Button>
          <Button onClick={handleDeleteSession} color="error" variant="contained">
            削除
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default StudySessionList; 